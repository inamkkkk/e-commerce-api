{
  "docs": [
    {
      "summary": "This file describes the metadata for the Node.js e-commerce API backend. It includes the project name, version, description, entry point, scripts for starting and development, keywords, author, license, and lists of its dependencies and development dependencies."
    },
    {
      "summary": "This file is an example environment configuration file. It lists the environment variables required for the application to run, along with their default or example values.  It should not be committed to version control with sensitive information like JWT_SECRET."
    },
    {
      "paths": {
        "/api/v1/health": {
          "get": {
            "summary": "Health check endpoint",
            "tags": [
              "Health"
            ],
            "responses": {
              "200": {
                "description": "API is healthy",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "API is healthy!"
                        },
                        "uptime": {
                          "type": "number",
                          "description": "Server uptime in seconds"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/api/v1/auth/{...}": {
          "get": {
            "summary": "Authentication routes (e.g., login, register)",
            "tags": [
              "Authentication"
            ],
            "description": "This path is a placeholder for various authentication-related endpoints provided by authRoutes. Please refer to authRoutes for specific details."
          },
          "post": {
            "summary": "Authentication routes (e.g., login, register)",
            "tags": [
              "Authentication"
            ],
            "description": "This path is a placeholder for various authentication-related endpoints provided by authRoutes. Please refer to authRoutes for specific details."
          }
        },
        "/api/v1/products/{...}": {
          "get": {
            "summary": "Product management routes",
            "tags": [
              "Products"
            ],
            "description": "This path is a placeholder for various product-related endpoints provided by productRoutes. Please refer to productRoutes for specific details."
          },
          "post": {
            "summary": "Product management routes",
            "tags": [
              "Products"
            ],
            "description": "This path is a placeholder for various product-related endpoints provided by productRoutes. Please refer to productRoutes for specific details."
          }
        },
        "/api/v1/cart/{...}": {
          "get": {
            "summary": "Shopping cart routes",
            "tags": [
              "Cart"
            ],
            "description": "This path is a placeholder for various cart-related endpoints provided by cartRoutes. Please refer to cartRoutes for specific details."
          },
          "post": {
            "summary": "Shopping cart routes",
            "tags": [
              "Cart"
            ],
            "description": "This path is a placeholder for various cart-related endpoints provided by cartRoutes. Please refer to cartRoutes for specific details."
          }
        },
        "/api/v1/orders/{...}": {
          "get": {
            "summary": "Order management routes",
            "tags": [
              "Orders"
            ],
            "description": "This path is a placeholder for various order-related endpoints provided by orderRoutes. Please refer to orderRoutes for specific details."
          },
          "post": {
            "summary": "Order management routes",
            "tags": [
              "Orders"
            ],
            "description": "This path is a placeholder for various order-related endpoints provided by orderRoutes. Please refer to orderRoutes for specific details."
          }
        }
      },
      "summary": "Main application entry point. Sets up Express server, connects to database, mounts routes, and defines global middlewares."
    },
    {
      "summary": "Configuration and database connection module. Exports application configuration settings and a function to establish a MongoDB connection."
    },
    {
      "components": {
        "schemas": {
          "User": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the user (auto-generated by MongoDB)"
              },
              "name": {
                "type": "string",
                "description": "The full name of the user",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "description": "The email address of the user",
                "format": "email",
                "example": "john.doe@example.com"
              },
              "password": {
                "type": "string",
                "description": "The user's password (hashed)",
                "writeOnly": true,
                "minLength": 6,
                "example": "securepassword123"
              },
              "role": {
                "type": "string",
                "description": "The role assigned to the user",
                "enum": [
                  "customer",
                  "admin"
                ],
                "default": "customer",
                "example": "customer"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the user was created",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "email",
              "password"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "Product": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the product.",
                "example": "Laptop"
              },
              "description": {
                "type": "string",
                "description": "A detailed description of the product.",
                "example": "A high-performance laptop suitable for gaming and professional work."
              },
              "price": {
                "type": "number",
                "description": "The price of the product.",
                "example": 1200.5,
                "minimum": 0
              },
              "stock": {
                "type": "number",
                "description": "The current stock quantity of the product.",
                "example": 50,
                "minimum": 0
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time when the product was created.",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "description",
              "price",
              "stock"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "CartItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "ID of the product in the cart.",
                "format": "objectId"
              },
              "quantity": {
                "type": "integer",
                "description": "Number of units of the product.",
                "minimum": 1,
                "errorMessage": "Quantity must be at least 1"
              }
            },
            "required": [
              "productId",
              "quantity"
            ],
            "description": "Represents an item within a shopping cart."
          },
          "Cart": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "description": "ID of the user who owns this cart.",
                "format": "objectId"
              },
              "items": {
                "type": "array",
                "description": "List of items in the shopping cart.",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of the last update to the cart."
              }
            },
            "required": [
              "userId",
              "items"
            ],
            "description": "Represents a user's shopping cart."
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "OrderItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "Reference to the Product ID.",
                "format": "objectId"
              },
              "quantity": {
                "type": "integer",
                "description": "The quantity of the product ordered.",
                "minimum": 1
              },
              "priceAtOrder": {
                "type": "number",
                "description": "The price of the item at the time of order.",
                "minimum": 0
              }
            },
            "required": [
              "productId",
              "quantity",
              "priceAtOrder"
            ],
            "description": "Schema for an item within an order."
          },
          "Order": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "description": "Reference to the User ID who placed the order.",
                "format": "objectId"
              },
              "items": {
                "type": "array",
                "description": "An array of items included in the order.",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                },
                "minItems": 1
              },
              "totalPrice": {
                "type": "number",
                "description": "The total price of the order.",
                "minimum": 0
              },
              "status": {
                "type": "string",
                "description": "The current status of the order.",
                "enum": [
                  "pending",
                  "completed",
                  "cancelled"
                ],
                "default": "pending"
              },
              "createdAt": {
                "type": "string",
                "description": "The date and time the order was created.",
                "format": "date-time"
              }
            },
            "required": [
              "userId",
              "items",
              "totalPrice"
            ],
            "description": "Represents a customer order."
          }
        }
      }
    }
  ]
}