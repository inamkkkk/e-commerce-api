{
  "docs": [
    {
      "summary": "This file describes the metadata for the Node.js e-commerce API backend. It includes the project name, version, description, entry point, scripts for starting and development, keywords, author, license, and lists of its dependencies and development dependencies."
    },
    {
      "summary": "This file is an example environment configuration file. It lists the environment variables required for the application to run, along with their default or example values.  It should not be committed to version control with sensitive information like JWT_SECRET."
    },
    {
      "paths": {
        "/api/v1/health": {
          "get": {
            "summary": "Health check endpoint",
            "tags": [
              "Health"
            ],
            "responses": {
              "200": {
                "description": "API is healthy",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "API is healthy!"
                        },
                        "uptime": {
                          "type": "number",
                          "description": "Server uptime in seconds"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/api/v1/auth/{...}": {
          "get": {
            "summary": "Authentication routes (e.g., login, register)",
            "tags": [
              "Authentication"
            ],
            "description": "This path is a placeholder for various authentication-related endpoints provided by authRoutes. Please refer to authRoutes for specific details."
          },
          "post": {
            "summary": "Authentication routes (e.g., login, register)",
            "tags": [
              "Authentication"
            ],
            "description": "This path is a placeholder for various authentication-related endpoints provided by authRoutes. Please refer to authRoutes for specific details."
          }
        },
        "/api/v1/products/{...}": {
          "get": {
            "summary": "Product management routes",
            "tags": [
              "Products"
            ],
            "description": "This path is a placeholder for various product-related endpoints provided by productRoutes. Please refer to productRoutes for specific details."
          },
          "post": {
            "summary": "Product management routes",
            "tags": [
              "Products"
            ],
            "description": "This path is a placeholder for various product-related endpoints provided by productRoutes. Please refer to productRoutes for specific details."
          }
        },
        "/api/v1/cart/{...}": {
          "get": {
            "summary": "Shopping cart routes",
            "tags": [
              "Cart"
            ],
            "description": "This path is a placeholder for various cart-related endpoints provided by cartRoutes. Please refer to cartRoutes for specific details."
          },
          "post": {
            "summary": "Shopping cart routes",
            "tags": [
              "Cart"
            ],
            "description": "This path is a placeholder for various cart-related endpoints provided by cartRoutes. Please refer to cartRoutes for specific details."
          }
        },
        "/api/v1/orders/{...}": {
          "get": {
            "summary": "Order management routes",
            "tags": [
              "Orders"
            ],
            "description": "This path is a placeholder for various order-related endpoints provided by orderRoutes. Please refer to orderRoutes for specific details."
          },
          "post": {
            "summary": "Order management routes",
            "tags": [
              "Orders"
            ],
            "description": "This path is a placeholder for various order-related endpoints provided by orderRoutes. Please refer to orderRoutes for specific details."
          }
        }
      },
      "summary": "Main application entry point. Sets up Express server, connects to database, mounts routes, and defines global middlewares."
    },
    {
      "summary": "Configuration and database connection module. Exports application configuration settings and a function to establish a MongoDB connection."
    },
    {
      "components": {
        "schemas": {
          "User": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the user (auto-generated by MongoDB)"
              },
              "name": {
                "type": "string",
                "description": "The full name of the user",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "description": "The email address of the user",
                "format": "email",
                "example": "john.doe@example.com"
              },
              "password": {
                "type": "string",
                "description": "The user's password (hashed)",
                "writeOnly": true,
                "minLength": 6,
                "example": "securepassword123"
              },
              "role": {
                "type": "string",
                "description": "The role assigned to the user",
                "enum": [
                  "customer",
                  "admin"
                ],
                "default": "customer",
                "example": "customer"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp when the user was created",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "email",
              "password"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "Product": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the product.",
                "example": "Laptop"
              },
              "description": {
                "type": "string",
                "description": "A detailed description of the product.",
                "example": "A high-performance laptop suitable for gaming and professional work."
              },
              "price": {
                "type": "number",
                "description": "The price of the product.",
                "example": 1200.5,
                "minimum": 0
              },
              "stock": {
                "type": "number",
                "description": "The current stock quantity of the product.",
                "example": 50,
                "minimum": 0
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "The date and time when the product was created.",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "description",
              "price",
              "stock"
            ]
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "CartItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "ID of the product in the cart.",
                "format": "objectId"
              },
              "quantity": {
                "type": "integer",
                "description": "Number of units of the product.",
                "minimum": 1,
                "errorMessage": "Quantity must be at least 1"
              }
            },
            "required": [
              "productId",
              "quantity"
            ],
            "description": "Represents an item within a shopping cart."
          },
          "Cart": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "description": "ID of the user who owns this cart.",
                "format": "objectId"
              },
              "items": {
                "type": "array",
                "description": "List of items in the shopping cart.",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of the last update to the cart."
              }
            },
            "required": [
              "userId",
              "items"
            ],
            "description": "Represents a user's shopping cart."
          }
        }
      }
    },
    {
      "components": {
        "schemas": {
          "OrderItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "Reference to the Product ID.",
                "format": "objectId"
              },
              "quantity": {
                "type": "integer",
                "description": "The quantity of the product ordered.",
                "minimum": 1
              },
              "priceAtOrder": {
                "type": "number",
                "description": "The price of the item at the time of order.",
                "minimum": 0
              }
            },
            "required": [
              "productId",
              "quantity",
              "priceAtOrder"
            ],
            "description": "Schema for an item within an order."
          },
          "Order": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "description": "Reference to the User ID who placed the order.",
                "format": "objectId"
              },
              "items": {
                "type": "array",
                "description": "An array of items included in the order.",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                },
                "minItems": 1
              },
              "totalPrice": {
                "type": "number",
                "description": "The total price of the order.",
                "minimum": 0
              },
              "status": {
                "type": "string",
                "description": "The current status of the order.",
                "enum": [
                  "pending",
                  "completed",
                  "cancelled"
                ],
                "default": "pending"
              },
              "createdAt": {
                "type": "string",
                "description": "The date and time the order was created.",
                "format": "date-time"
              }
            },
            "required": [
              "userId",
              "items",
              "totalPrice"
            ],
            "description": "Represents a customer order."
          }
        }
      }
    },
    {
      "summary": "Authentication service for user signup and login."
    },
    {
      "paths": {
        "/products": {
          "get": {
            "summary": "Get all products with optional filtering, pagination, and sorting.",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "name": "search",
                "in": "query",
                "schema": {
                  "type": "string"
                },
                "description": "Search term to filter products by name or description."
              },
              {
                "name": "limit",
                "in": "query",
                "schema": {
                  "type": "integer",
                  "default": 10
                },
                "description": "Maximum number of products to return."
              },
              {
                "name": "page",
                "in": "query",
                "schema": {
                  "type": "integer",
                  "default": 1
                },
                "description": "Page number for pagination."
              },
              {
                "name": "sortBy",
                "in": "query",
                "schema": {
                  "type": "string"
                },
                "description": "Field to sort by, followed by ':asc' or ':desc' (e.g., 'price:desc'). Defaults to 'createdAt:desc'."
              }
            ],
            "responses": {
              "200": {
                "description": "A list of products with pagination information.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "products": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Product"
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "currentPage": {
                              "type": "integer"
                            },
                            "itemsPerPage": {
                              "type": "integer"
                            },
                            "totalItems": {
                              "type": "integer"
                            },
                            "totalPages": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal server error."
              }
            }
          },
          "post": {
            "summary": "Create a new product.",
            "tags": [
              "Products"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductInput"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "The newly created product.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request, e.g., missing required fields or invalid data types."
              },
              "500": {
                "description": "Internal server error."
              }
            }
          }
        },
        "/products/{id}": {
          "get": {
            "summary": "Get a specific product by ID.",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the product to retrieve."
              }
            ],
            "responses": {
              "200": {
                "description": "The requested product.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              },
              "404": {
                "description": "Product not found."
              },
              "500": {
                "description": "Internal server error."
              }
            }
          },
          "put": {
            "summary": "Update an existing product by ID.",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the product to update."
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductUpdateInput"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "The updated product.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request, e.g., invalid data types."
              },
              "404": {
                "description": "Product not found."
              },
              "500": {
                "description": "Internal server error."
              }
            }
          },
          "delete": {
            "summary": "Delete a product by ID.",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the product to delete."
              }
            ],
            "responses": {
              "200": {
                "description": "Success message indicating the product was deleted.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Product deleted successfully."
                        }
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Product not found."
              },
              "500": {
                "description": "Internal server error."
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "Product": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the product."
              },
              "name": {
                "type": "string",
                "description": "Name of the product."
              },
              "description": {
                "type": "string",
                "description": "Detailed description of the product."
              },
              "price": {
                "type": "number",
                "description": "Price of the product."
              },
              "category": {
                "type": "string",
                "description": "Category the product belongs to."
              },
              "stock": {
                "type": "integer",
                "description": "Current stock quantity of the product."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the product was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the product was last updated."
              }
            },
            "required": [
              "name",
              "description",
              "price",
              "category",
              "stock"
            ]
          },
          "ProductInput": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the product."
              },
              "description": {
                "type": "string",
                "description": "Detailed description of the product."
              },
              "price": {
                "type": "number",
                "description": "Price of the product. Must be non-negative."
              },
              "category": {
                "type": "string",
                "description": "Category the product belongs to."
              },
              "stock": {
                "type": "integer",
                "description": "Current stock quantity of the product. Must be non-negative."
              }
            },
            "required": [
              "name",
              "description",
              "price",
              "category",
              "stock"
            ]
          },
          "ProductUpdateInput": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the product."
              },
              "description": {
                "type": "string",
                "description": "Detailed description of the product."
              },
              "price": {
                "type": "number",
                "description": "Price of the product. Must be non-negative if provided."
              },
              "category": {
                "type": "string",
                "description": "Category the product belongs to."
              },
              "stock": {
                "type": "integer",
                "description": "Current stock quantity of the product. Must be non-negative if provided."
              }
            },
            "description": "Fields to update for a product. All fields are optional."
          }
        }
      }
    },
    {
      "paths": {
        "/cart": {
          "get": {
            "summary": "Get the user's cart by their user ID.",
            "tags": [
              "Cart"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "query",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the user whose cart to retrieve."
              }
            ],
            "responses": {
              "200": {
                "description": "User's cart retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Cart"
                    }
                  }
                }
              },
              "404": {
                "description": "Cart not found for the specified user.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "post": {
            "summary": "Add items to the user's cart.",
            "tags": [
              "Cart"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "query",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the user to add items to their cart."
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "productId": {
                              "type": "string",
                              "description": "The ID of the product to add."
                            },
                            "quantity": {
                              "type": "integer",
                              "minimum": 1,
                              "description": "The quantity of the product to add."
                            }
                          },
                          "required": [
                            "productId",
                            "quantity"
                          ]
                        }
                      }
                    },
                    "required": [
                      "items"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Items added to the cart successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Cart"
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid request body or insufficient stock.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Product not found.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "summary": "Remove items from the user's cart.",
            "tags": [
              "Cart"
            ],
            "parameters": [
              {
                "name": "userId",
                "in": "query",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the user to remove items from their cart."
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "productId": {
                              "type": "string",
                              "description": "The ID of the product to remove."
                            },
                            "quantity": {
                              "type": "integer",
                              "minimum": 1,
                              "description": "The quantity of the product to remove."
                            }
                          },
                          "required": [
                            "productId",
                            "quantity"
                          ]
                        }
                      }
                    },
                    "required": [
                      "items"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Items removed from the cart successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Cart"
                    }
                  }
                }
              },
              "404": {
                "description": "Cart not found or item not found in cart.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "Cart": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the cart."
              },
              "userId": {
                "type": "string",
                "description": "The ID of the user who owns the cart."
              },
              "items": {
                "type": "array",
                "description": "List of items in the cart.",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the cart was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the cart was last updated."
              }
            },
            "required": [
              "_id",
              "userId",
              "items"
            ]
          },
          "CartItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "The ID of the product in the cart."
              },
              "quantity": {
                "type": "integer",
                "minimum": 1,
                "description": "The quantity of the product in the cart."
              },
              "name": {
                "type": "string",
                "description": "The name of the product."
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "The price of the product."
              }
            },
            "required": [
              "productId",
              "quantity"
            ]
          },
          "Product": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the product."
              },
              "name": {
                "type": "string",
                "description": "The name of the product."
              },
              "description": {
                "type": "string",
                "description": "A detailed description of the product."
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "The price of the product."
              },
              "stock": {
                "type": "integer",
                "description": "The current stock level of the product."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the product was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the product was last updated."
              }
            },
            "required": [
              "_id",
              "name",
              "price",
              "stock"
            ]
          }
        }
      }
    },
    {
      "summary": "Service layer for handling order-related operations, including creation, retrieval, and payment processing. It interacts with Order, Cart, and Product Mongoose models, and a hypothetical external payment gateway.",
      "components": {
        "schemas": {
          "OrderItemInput": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "The ID of the product being ordered."
              },
              "quantity": {
                "type": "integer",
                "description": "The quantity of the product to order.",
                "minimum": 1
              }
            },
            "required": [
              "productId",
              "quantity"
            ]
          },
          "OrderItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "Reference to the Product model."
              },
              "quantity": {
                "type": "integer",
                "description": "The quantity of the product in the order."
              },
              "priceAtOrder": {
                "type": "number",
                "format": "float",
                "description": "The price of the product at the time the order was placed."
              }
            },
            "required": [
              "productId",
              "quantity",
              "priceAtOrder"
            ]
          },
          "PaymentResult": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "description": "The payment gateway provider used."
              },
              "transactionId": {
                "type": "string",
                "description": "The unique identifier for the transaction from the payment gateway."
              },
              "status": {
                "type": "string",
                "description": "The status of the payment transaction (e.g., 'success', 'failed')."
              }
            },
            "required": [
              "provider",
              "transactionId",
              "status"
            ]
          },
          "Order": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the order."
              },
              "userId": {
                "type": "string",
                "description": "The ID of the user who placed the order."
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                },
                "description": "List of items included in the order."
              },
              "totalPrice": {
                "type": "number",
                "format": "float",
                "description": "The total price of the order."
              },
              "status": {
                "type": "string",
                "description": "The current status of the order (e.g., 'pending', 'completed', 'cancelled', 'payment_failed')."
              },
              "paymentResult": {
                "$ref": "#/components/schemas/PaymentResult",
                "description": "Details of the payment transaction."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the order was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the order was last updated."
              }
            },
            "required": [
              "_id",
              "userId",
              "items",
              "totalPrice",
              "status"
            ]
          }
        }
      },
      "paths": {
        "/orders": {
          "post": {
            "summary": "Creates a new order for the authenticated user.",
            "tags": [
              "Order"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/OrderItemInput"
                        },
                        "description": "An array of items to be included in the order. Each item must have a productId and a positive quantity."
                      }
                    },
                    "required": [
                      "items"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Order created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request: Invalid item format, no items in order, or insufficient stock.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found: One or more products in the order do not exist.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error: Failed to process payment or other server-side issues.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/orders/{orderId}": {
          "get": {
            "summary": "Retrieves a specific order by its ID for the authenticated user.",
            "tags": [
              "Order"
            ],
            "parameters": [
              {
                "name": "orderId",
                "in": "path",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The unique identifier of the order to retrieve."
              }
            ],
            "responses": {
              "200": {
                "description": "Order details retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              },
              "404": {
                "description": "Not Found: The order was not found or the user is not authorized to view it.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/users/me/orders": {
          "get": {
            "summary": "Retrieves all orders placed by the authenticated user.",
            "tags": [
              "Order"
            ],
            "responses": {
              "200": {
                "description": "List of orders retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "paths": {
        "/auth/signup": {
          "post": {
            "summary": "User Registration",
            "tags": [
              "Authentication"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the user."
                      },
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "The email address of the user."
                      },
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "The password for the user account."
                      }
                    },
                    "required": [
                      "name",
                      "email",
                      "password"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "User registered successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "token": {
                              "type": "string",
                              "description": "JWT token for authentication."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "error"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "409": {
                "description": "Conflict - Email already exists",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "error"
                        },
                        "message": {
                          "type": "string",
                          "example": "Email address already in use."
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        },
        "/auth/login": {
          "post": {
            "summary": "User Login",
            "tags": [
              "Authentication"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "The email address of the user."
                      },
                      "password": {
                        "type": "string",
                        "format": "password",
                        "description": "The password for the user account."
                      }
                    },
                    "required": [
                      "email",
                      "password"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "User logged in successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "token": {
                              "type": "string",
                              "description": "JWT token for authentication."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Missing email or password",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "error"
                        },
                        "message": {
                          "type": "string",
                          "example": "Email and password are required."
                        }
                      }
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized - Invalid credentials",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "error"
                        },
                        "message": {
                          "type": "string",
                          "example": "Invalid email or password."
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error"
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "User": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the user."
              },
              "name": {
                "type": "string",
                "description": "The name of the user."
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "The email address of the user."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of user creation."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of last user update."
              }
            },
            "required": [
              "_id",
              "name",
              "email",
              "createdAt",
              "updatedAt"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/products": {
          "get": {
            "summary": "Get all products",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "in": "query",
                "name": "sort",
                "schema": {
                  "type": "string"
                },
                "description": "Sort order for products (e.g., 'price', '-price' for descending)"
              },
              {
                "in": "query",
                "name": "limit",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Maximum number of products to return"
              },
              {
                "in": "query",
                "name": "page",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Page number for pagination"
              }
            ],
            "responses": {
              "200": {
                "description": "A list of products",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "results": {
                          "type": "integer",
                          "description": "Number of products returned",
                          "example": 10
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "products": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Product"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "post": {
            "summary": "Create a new product",
            "tags": [
              "Products"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductInput"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Product created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "$ref": "#/components/schemas/Product"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request, e.g., missing required fields or invalid input"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          }
        },
        "/products/{id}": {
          "get": {
            "summary": "Get a single product by ID",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the product to retrieve"
              }
            ],
            "responses": {
              "200": {
                "description": "Product found",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "$ref": "#/components/schemas/Product"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "404": {
                "description": "Product not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "patch": {
            "summary": "Update a product by ID",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the product to update"
              }
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProductInput"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Product updated successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "$ref": "#/components/schemas/Product"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad request, e.g., invalid input for update"
              },
              "404": {
                "description": "Product not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          },
          "delete": {
            "summary": "Delete a product by ID",
            "tags": [
              "Products"
            ],
            "parameters": [
              {
                "in": "path",
                "name": "id",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "description": "The ID of the product to delete"
              }
            ],
            "responses": {
              "204": {
                "description": "Product deleted successfully"
              },
              "404": {
                "description": "Product not found"
              },
              "500": {
                "description": "Internal server error"
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "Product": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for the product",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "Name of the product"
              },
              "description": {
                "type": "string",
                "description": "Detailed description of the product"
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "Price of the product"
              },
              "category": {
                "type": "string",
                "description": "Category the product belongs to"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of product creation",
                "readOnly": true
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of last product update",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "price",
              "category"
            ]
          },
          "ProductInput": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the product"
              },
              "description": {
                "type": "string",
                "description": "Detailed description of the product"
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "Price of the product"
              },
              "category": {
                "type": "string",
                "description": "Category the product belongs to"
              }
            },
            "required": [
              "name",
              "price",
              "category"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/cart": {
          "get": {
            "summary": "Get the user's shopping cart",
            "tags": [
              "Cart"
            ],
            "responses": {
              "200": {
                "description": "Successfully retrieved the user's cart",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "cart": {
                              "$ref": "#/components/schemas/Cart"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized - User not authenticated"
              },
              "500": {
                "description": "Internal Server Error"
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          },
          "post": {
            "summary": "Add items to the user's shopping cart",
            "tags": [
              "Cart"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CartItemInput"
                        },
                        "description": "Array of items to add to the cart"
                      }
                    },
                    "required": [
                      "items"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Items successfully added to the cart",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "cart": {
                              "$ref": "#/components/schemas/Cart"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid items format or missing required fields"
              },
              "401": {
                "description": "Unauthorized - User not authenticated"
              },
              "404": {
                "description": "Not Found - One or more products not found"
              },
              "500": {
                "description": "Internal Server Error"
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          },
          "delete": {
            "summary": "Remove items from the user's shopping cart",
            "tags": [
              "Cart"
            ],
            "requestBody": {
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/CartItemInput"
                        },
                        "description": "Array of items to remove from the cart"
                      }
                    },
                    "required": [
                      "items"
                    ]
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Items successfully removed from the cart",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "cart": {
                              "$ref": "#/components/schemas/Cart"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid items format or missing required fields"
              },
              "401": {
                "description": "Unauthorized - User not authenticated"
              },
              "404": {
                "description": "Not Found - One or more items not found in the cart"
              },
              "500": {
                "description": "Internal Server Error"
              }
            },
            "security": [
              {
                "bearerAuth": []
              }
            ]
          }
        }
      },
      "components": {
        "schemas": {
          "CartItemInput": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "The ID of the product",
                "example": "prod_123abc"
              },
              "quantity": {
                "type": "integer",
                "description": "The quantity of the product to add/remove",
                "minimum": 1,
                "example": 2
              }
            },
            "required": [
              "productId",
              "quantity"
            ]
          },
          "CartItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "The ID of the product",
                "example": "prod_123abc"
              },
              "quantity": {
                "type": "integer",
                "description": "The quantity of the product in the cart",
                "minimum": 1,
                "example": 2
              },
              "price": {
                "type": "number",
                "format": "float",
                "description": "The price of a single unit of the product",
                "example": 19.99
              },
              "name": {
                "type": "string",
                "description": "The name of the product",
                "example": "Example Gadget"
              }
            },
            "required": [
              "productId",
              "quantity",
              "price",
              "name"
            ]
          },
          "Cart": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "description": "The ID of the user associated with this cart",
                "example": "user_xyz789"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                },
                "description": "Array of items currently in the cart"
              },
              "totalAmount": {
                "type": "number",
                "format": "float",
                "description": "The total amount of all items in the cart",
                "example": 79.96
              }
            },
            "required": [
              "userId",
              "items",
              "totalAmount"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/orders": {
          "post": {
            "summary": "Create a new order from the user's cart.",
            "tags": [
              "Orders"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "requestBody": {
              "description": "Request body for creating an order. Currently not used as order details are derived from the user's cart.",
              "required": false,
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "shippingAddress": {
                        "type": "string",
                        "description": "Optional shipping address for the order."
                      },
                      "paymentMethod": {
                        "type": "string",
                        "description": "Optional payment method for the order."
                      }
                    }
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Order created successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "order": {
                              "$ref": "#/components/schemas/Order"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request. For example, the user's cart is empty."
              },
              "401": {
                "description": "Unauthorized. User is not authenticated."
              },
              "500": {
                "description": "Internal Server Error."
              }
            }
          },
          "get": {
            "summary": "Retrieve a list of orders for the authenticated user.",
            "tags": [
              "Orders"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "parameters": [
              {
                "name": "status",
                "in": "query",
                "description": "Filter orders by status (e.g., 'shipped', 'pending').",
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "limit",
                "in": "query",
                "description": "Maximum number of orders to return.",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              {
                "name": "page",
                "in": "query",
                "description": "Page number for pagination.",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "A list of orders retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "results": {
                          "type": "integer",
                          "description": "Number of orders returned."
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "orders": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/Order"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized. User is not authenticated."
              },
              "500": {
                "description": "Internal Server Error."
              }
            }
          }
        },
        "/orders/{id}": {
          "get": {
            "summary": "Retrieve a specific order by its ID.",
            "tags": [
              "Orders"
            ],
            "security": [
              {
                "bearerAuth": []
              }
            ],
            "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "The ID of the order to retrieve.",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "objectId",
                  "pattern": "^[0-9a-fA-F]{24}$"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "Order retrieved successfully.",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "example": "success"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "order": {
                              "$ref": "#/components/schemas/Order"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request. Invalid Order ID format."
              },
              "401": {
                "description": "Unauthorized. User is not authenticated."
              },
              "404": {
                "description": "Not Found. The order with the specified ID was not found or does not belong to the user."
              },
              "500": {
                "description": "Internal Server Error."
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "OrderItem": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "Reference to the product ID."
              },
              "quantity": {
                "type": "integer",
                "description": "Quantity of the product ordered.",
                "minimum": 1
              }
            },
            "required": [
              "productId",
              "quantity"
            ]
          },
          "Order": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Unique identifier for the order."
              },
              "userId": {
                "type": "string",
                "description": "ID of the user who placed the order."
              },
              "items": {
                "type": "array",
                "description": "List of items in the order.",
                "items": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              },
              "totalPrice": {
                "type": "number",
                "description": "Total price of the order."
              },
              "status": {
                "type": "string",
                "description": "Current status of the order (e.g., 'pending', 'shipped', 'delivered', 'cancelled').",
                "enum": [
                  "pending",
                  "shipped",
                  "delivered",
                  "cancelled"
                ]
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the order was created."
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp when the order was last updated."
              }
            },
            "required": [
              "_id",
              "userId",
              "items",
              "totalPrice",
              "status",
              "createdAt",
              "updatedAt"
            ]
          }
        }
      }
    },
    {
      "paths": {
        "/signup": {
          "post": {
            "summary": "User signup",
            "tags": [
              "Auth"
            ],
            "requestBody": {
              "description": "User registration data",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SignupRequest"
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "User created successfully",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User registered successfully"
                        },
                        "userId": {
                          "type": "string",
                          "format": "uuid",
                          "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input data",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid input data"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "example": "email"
                              },
                              "message": {
                                "type": "string",
                                "example": "Email is required"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "409": {
                "description": "Conflict - User already exists",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "User with this email already exists"
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "An unexpected error occurred"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "/login": {
          "post": {
            "summary": "User login",
            "tags": [
              "Auth"
            ],
            "requestBody": {
              "description": "User login credentials",
              "required": true,
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LoginRequest"
                  }
                }
              }
            },
            "responses": {
              "200": {
                "description": "Login successful",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Login successful"
                        },
                        "token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request - Invalid input data",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid input data"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "field": {
                                "type": "string",
                                "example": "email"
                              },
                              "message": {
                                "type": "string",
                                "example": "Email is required"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "401": {
                "description": "Unauthorized - Invalid credentials",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid email or password"
                        }
                      }
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "An unexpected error occurred"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "components": {
        "schemas": {
          "SignupRequest": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's full name",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address",
                "example": "john.doe@example.com"
              },
              "password": {
                "type": "string",
                "format": "password",
                "description": "User's password",
                "minLength": 8,
                "example": "securePassword123"
              }
            },
            "required": [
              "name",
              "email",
              "password"
            ]
          },
          "LoginRequest": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email address",
                "example": "john.doe@example.com"
              },
              "password": {
                "type": "string",
                "format": "password",
                "description": "User's password",
                "example": "securePassword123"
              }
            },
            "required": [
              "email",
              "password"
            ]
          }
        }
      }
    }
  ]
}